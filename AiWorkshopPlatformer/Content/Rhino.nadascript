class Rhino : NadaComponent
{
  // Dependencies
  [Dependency] var Character : Character;
  [Dependency] var SweptController : SweptController;
  [Dependency] var AnimationController : AnimationController;
  
  var IsVisible = false;
  var Charging = false;
  
  // Easy access to the players position
  var PlayerPosition : Real3
  {
    get
    {
      return this.Space.FindObjectByName("Player").Transform.Translation;
    }
  }
  
  var PlayerIsDead : Boolean
  {
    get
    {
      return this.Space.FindObjectByName("Player").Character.Dead;
    }
  }
  
  var Attacking : Boolean
  {
    get { return this.Owner.AnimationController.Attacking; }
  }
  
  // Easy access to our position
  var OurPosition : Real3
  {
    get { return this.Owner.Transform.Translation; }
  }
  
  var Dead : Boolean
  {
    get { return this.Character.Dead;}
  }
  
  var OnGround : Boolean
  {
    get { return this.Owner.SweptController.Grounded;}
  }
  
  function Initialize(init : CogInitializer)
  {
    Zilch.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    
    var body = this.Owner.FindChildByName("Body");
    body.Graphical.VisibilityEvents = true;
    Zilch.Connect(body, Events.EnterView, this.OnEnterView);
    Zilch.Connect(body, Events.ExitView, this.OnExitView);
  }

  function OnEnterView(event : GraphicalEvent)
  {
    this.IsVisible = true;
  }

  function OnExitView(event : GraphicalEvent)
  {
    this.IsVisible = false;
  }

  function OnLogicUpdate(event : UpdateEvent)
  {
    // Camera shake when the rhino is running
    var vel = Math.Length(this.Owner.RigidBody.Velocity);
    if(vel >= 5)
    {
      if(this.OnGround && this.Charging && this.IsVisible)
      {
        var camera = this.Space.FindObjectByName("Camera");
        
        camera.CameraShake.CurrentIntensity = 0.05;
      }
    }
    
    this.Charging = false;
  }
  
  function Jump()
  {
    this.Character.Jump();
  }
  
  function WalkLeft()
  {
    this.Character.WalkLeft();
  }
  
  function WalkRight()
  {
    this.Character.WalkRight();
  }
  
  function ChargeLeft()
  {
    this.Character.RunLeft();
    this.Charging = true;
  }
  
  function ChargeRight()
  {
    this.Character.RunRight();
    this.Charging = true;
  }
  
  function Attack()
  {
    if(!this.Attacking)
    {
      this.Owner.AnimationController.Attack();
    }
  }
}
